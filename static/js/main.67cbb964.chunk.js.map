{"version":3,"sources":["components/List/List.jsx","hooks/useJsonFetch.js","components/Details/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["List","items","selectedID","onClick","className","map","o","id","key","name","defaultProps","useJsonFetch","url","opts","useState","data","setData","loading","setLoading","error","setError","useEffect","a","fetch","response","ok","Error","statusText","json","fetchData","Details","info","user","setUser","process","JSON","stringify","avatar","details","alt","src","Object","keys","toUpperCase","slice","App","users","setUsers","selectedUserID","setSelectedUserID","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.67cbb964.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './List.css';\n\nfunction List({ items, selectedID, onClick }) {\n  return (\n    <ul className='list'>\n      {items.map(o =>\n        <li\n          className={((selectedID === o.id) ? 'selected' : '') + ' list-item'}\n          key={o.id}\n          onClick={() => onClick(o.id)}\n        >\n            {o.name}\n        </li>\n      )}\n    </ul>\n  )\n}\n\nList.defaultProps = {\n  items: [],\n}\n\nList.propTypes = {\n  items: PropTypes.array,\n  selectedID: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onClick: PropTypes.func,\n}\n\n\nexport default List\n\n","import { useState, useEffect } from \"react\";\n\nexport default function useJsonFetch(url, opts) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(url, opts);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        const data = await response.json();\n        setData(data);\n        setError(null);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    return () => {};\n  }, [url, opts]);\n  return [{data, loading, error}];\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Details.css';\nimport useJsonFetch from '../../hooks/useJsonFetch';\n\nfunction Details({ info }) {\n  const { name } = info;\n  const [user, setUser] = useState(info);\n\n  const [{data, loading, error}] = useJsonFetch(`${process.env.REACT_APP_USERS_URL}/${info.id}.json`);\n  if (data && (JSON.stringify(user) !== JSON.stringify(data))) setUser(data);\n  const { avatar, details } = user;\n\n  return (\n    <div className='details'>\n      { (!error) && <img className='details-img' alt={loading ? name : ''} src={loading ? '' : avatar}/> }\n      <div className='details-name'>{name}</div>\n      { (!error) && (\n          (loading)\n          ? <div className='detail'>{'Loading...'}</div>\n          : details && Object.keys(details).map((o) =>\n              <div className='detail' key={o}>\n                {`${o[0].toUpperCase()}${o.slice(1)}: ${details[o]}`}\n              </div>\n            )\n        )\n      }\n    </div>\n  )\n}\n\nDetails.propTypes = {\n  info: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    name: PropTypes.string.isRequired,\n  }),\n}\n\nexport default Details;\n","import React, { useState } from 'react';\nimport List from './components/List/List';\nimport './App.css';\nimport useJsonFetch from './hooks/useJsonFetch';\nimport Details from './components/Details/Details';\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [selectedUserID, setSelectedUserID] = useState(null);\n\n  const [{ data, loading }] = useJsonFetch(`${process.env.REACT_APP_USERS_URL}/users.json`);\n  if (data && (JSON.stringify(users) !== JSON.stringify(data))) setUsers(data);\n\n  return (\n    <div className='App'>\n      { loading && <div>{'Loading...'}</div> }\n      <List\n        items={users}\n        selectedID={selectedUserID}\n        onClick={(id) => setSelectedUserID(id)}\n      />\n      { selectedUserID && <Details info={users.find((o) => o.id === selectedUserID)}/> }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}